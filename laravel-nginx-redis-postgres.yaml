apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
      listen 80;
      server_name _;
      root /var/www/html;

      index index.php index.html;

      location / {
        try_files $uri /index.php?$args;
      }

      location ~ \.php$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass phpfpm-service:9000;
      }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-index
data:
  index.php: |
    <?php
    header('Content-Type: text/plain');
    echo 'ok';

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: phpfpm-deployment
spec:
  replicas: 5
  selector:
    matchLabels:
      app: phpfpm-app
  template:
    metadata:
      labels:
        app: phpfpm-app
    spec:
      containers:
      - name: phpfpm
        image: php:fpm-alpine
        ports:
        - containerPort: 9000
        env:
        - name: APP_ENV
          value: production
        - name: DB_HOST
          value: postgres-service
        - name: DB_PORT
          value: "5432"
        - name: DB_DATABASE
          value: appdb
        - name: DB_USERNAME
          value: appuser
        - name: DB_PASSWORD
          value: applongpassword
        - name: REDIS_HOST
          value: redis-service
        - name: REDIS_PORT
          value: "6379"
        volumeMounts:
        - name: app-code
          mountPath: /var/www/html/index.php
          subPath: index.php
      volumes:
      - name: app-code
        configMap:
          name: app-index

---
apiVersion: v1
kind: Service
metadata:
  name: phpfpm-service
spec:
  selector:
    app: phpfpm-app
  ports:
  - name: fpm
    protocol: TCP
    port: 9000
    targetPort: 9000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: app-service
spec:
  selector:
    app: phpfpm-app
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 9000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-lb
  template:
    metadata:
      labels:
        app: nginx-lb
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-config

---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx-lb
  ports:
  - name: http
    protocol: TCP
    port: 8084
    targetPort: 80
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
  - name: redis
    protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: appdb
        - name: POSTGRES_USER
          value: appuser
        - name: POSTGRES_PASSWORD
          value: applongpassword

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  - name: postgres
    protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-scripts
data:
  stress-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    
    export const options = {
      stages: [
        { duration: '30s', target: 50 },
        { duration: '1m', target: 50 },
        { duration: '30s', target: 0 },
      ],
      thresholds: {
        http_req_failed: ['rate<0.01'],
        http_req_duration: ['p(95)<500'],
      },
    };
    
    const TARGET = __ENV.TARGET_URL || 'http://127.0.0.0:80/';
    
    export default function () {
      const res = http.get(TARGET);
      check(res, {
        'status is 200': (r) => r.status === 200,
      });
      sleep(1);
    }

---
apiVersion: batch/v1
kind: Job
metadata:
  name: k6-stress-test
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: k6
    spec:
      restartPolicy: Never
      containers:
      - name: k6
        image: grafana/k6:latest
        args:
        - run
        - /scripts/stress-test.js
        env:
        - name: TARGET_URL
          value: http://nginx-service:8084/
        volumeMounts:
        - name: k6-scripts
          mountPath: /scripts
      volumes:
      - name: k6-scripts
        configMap:
          name: k6-scripts
